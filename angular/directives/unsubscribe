import { Directive, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';

/* This is not needed angular have native solution - takeUntilDestroyed:
* this.product_service.get().pipe(takeUntilDestroyed()).subscribe(data=>{});
*
* 
* How to use: in your component put:
* hostDirectives: [UnsubscriveDirective], 
* and then use it with observable
* private unsubDirective = inject(UnsubscribeDirective);
* someObservable.takeUntil(this.unsubDirective.$unsub).subscribe()
*
*/
@Directive({
  standalone: true,
  selector: 'unsubscribe',
})
export class UnsubscribeDirective implements OnDestroy {
  private unsubscribe: Subject<void> = new Subject<void>();

  get $unsub() {
    return this.unsubscribe.asObservable();
  }

  ngOnDestroy(): void {
    this.unsubscribe.next();
    this.unsubscribe.complete();
  }
}
